# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - compile
  - test
  - docker
  - deploy

include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml 

variables:
  STATIC_ADDRESS: "http://" # Address to deploy application
  SKIP_SAST: "false" # Ensure this is false to run SAST
  SKIP_CONTAINER_SCAN: "false" 
  SKIP_SCA: "false" # Ensure this is false to run SCA

  DEPENDENCY_SCANNING_DISABLED: 'true' # Variable for gitlab managed SCA
  SAST_DISABLED: 'true'
  CONTAINER_SCANNING_DISABLED: 'true'

compile:
  stage: compile
  image: node:20.17.0-alpine
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - node_modules/ # Share the installed dependencies
      - dist/          # Share the build artifacts
    expire_in: 1 hour

unit_test:
  stage: test
  image: node:20.17.0-alpine
  dependencies:
    - compile
  script:
    - npm run test

sca:
  stage: test
  extends:
    - .ds-analyzer
    - .cyclonedx-reports
  rules:
    - if: '$SKIP_SCA == "true" || $SKIP_SCA == "1"'
      when: never
    - changes:
      - "src/**/*"
  variables:
    DS_ANALYZER_NAME: "gemnasium"

sast_angular:
  extends: .sast-analyzer
  stage: test
  image:
    name: "$SAST_ANALYZER_IMAGE"
  variables:
    SEARCH_MAX_DEPTH: 20
    SAST_ANALYZER_IMAGE_TAG: '5'
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/semgrep:$SAST_ANALYZER_IMAGE_TAG$SAST_IMAGE_SUFFIX"
  artifacts:
    paths:
      - gl-sast-report.json
    reports:
      sast: gl-sast-report.json
  rules:
    - if: '$SKIP_SAST == "true" || $SKIP_SAST == "1"'
      when: never
    - changes:
      - "src/**/*"

docker-build-and-push:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - echo "Logging in to Docker Hub..."
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "Building Docker image..."
    - docker build -t $DOCKER_USERNAME/angular_pipeline:latest .
    - echo "Pushing Docker image to Docker Hub..."
    - docker push $DOCKER_USERNAME/angular_pipeline:latest

deploy_to_k8s: 
  stage: deploy
  image: bitnami/kubectl:latest
  services:
    - docker:dind
  before_script:
  - echo "$KUBE_CONFIG" | base64 -d > /root/.kube/config
  script:
    - echo "Deploying to Kubernetes..."
    - kubectl apply -f deploymentservice.yaml  # Applying the Kubernetes deployment and service
    - kubectl rollout status deployment/angular-k8s-deployment  # Wait for the deployment to finish

